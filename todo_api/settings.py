"""
Django settings for todo_api project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import ast
import os
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()


def get_bool_from_env(name, default_value):
    if name in os.environ:
        value = os.environ[name]
        try:
            return ast.literal_eval(value)
        except ValueError as e:
            raise ValueError(
                "{} is an invalid value for {}".format(value, name)) from e
    return default_value


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'g9%))zqxpw@weha0_68+yj5fnfz8-@kx+j(sh1b7*&=v0$xex0')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['3.114.190.202', 'localhost', 'yabesh.tk', 'www.yabesh.tk', 'http://yabesh.tk/']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',


    # packages
    'graphene_django',
    'rest_framework',
    'storages',

    # apps,
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'todo_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'todo_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': "django.db.backends.postgresql_psycopg2",
        'NAME': "postgres",
        'USER': "postgres",
        'PASSWORD': "postgres",
        'HOST': "localhost",
        'PORT': "5432",
        'TIME_ZONE': "Asia/Kolkata",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

GRAPHENE = {
    "SCHEMA": "graph_api.api.schema",
    "MIDDLEWARE": [
        "graphql_jwt.middleware.JSONWebTokenMiddleware",
    ],
}

AUTHENTICATION_BACKENDS = [
    "graphql_jwt.backends.JSONWebTokenBackend",
    "django.contrib.auth.backends.ModelBackend",
]


# REST_FRAMEWORK = { 'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema' }

def get_list(text):
    return [item.strip() for item in text.split(",")]


# cors settings
cors = get_bool_from_env('CORS', True)
if cors is True:
    INSTALLED_APPS += ['corsheaders']
    MIDDLEWARE += ['corsheaders.middleware.CorsMiddleware', ]
    CORS_ORIGIN_WHITELIST = get_list(
        os.environ.get('CORS_ORIGIN_WHITELIST', 'http://localhost:3000,http://127.0.0.1:3000'))
    SECURE_CROSS_ORIGIN_OPENER_POLICY = None

# AMAZON S3 CONFIGURATION
do_space = get_bool_from_env('DO_SPACE', False)
if do_space is True:
    print("do_space")
    # AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    # AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    # AWS_S3_ENDPOINT_URL = os.environ.get("AWS_S3_ENDPOINT_URL", None)
    # AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_CUSTOM_DOMAIN")
    # STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    # DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
    # STATICFILES_LOCATION = os.environ.get("STATICFILES_LOCATION")
    # MEDIAFILES_LOCATION = os.environ.get("MEDIAFILES_LOCATION")
    # AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    # AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
    # AWS_LOCATION = os.environ.get("AWS_LOCATION", "todo-api/static")
    # AWS_S3_FILE_OVERWRITE = get_bool_from_env("AWS_S3_FILE_OVERWRITE", False)
    # AWS_DEFAULT_ACL = None
    # AWS_S3_OBJECT_PARAMETERS = {
    #     'CacheControl': 'max-age=86400',
    # }
    # STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    # AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    # AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    # AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_SECRET_ACCESS_KEY")
    # AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    # AWS_S3_OBJECT_PARAMETERS = {
    #     'CacheControl': 'max-age=86400',
    # }
    # AWS_LOCATION = 'static'

    # STATICFILES_DIRS = (
    #     os.path.join(BASE_DIR, 'static/'),
    # )
    # STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


    # AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
    # AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
    # AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
    # AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    # AWS_S3_ENDPOINT_URL=os.environ.get("AWS_S3_ENDPOINT_URL")
    # AWS_S3_OBJECT_PARAMETERS = {
    #     'CacheControl': 'max-age=86400',
    # }
    # AWS_S3_REGION_NAME=os.environ.get("AWS_S3_REGION_NAME")
    # AWS_LOCATION = os.environ.get("AWS_LOCATION")
    # STATICFILES_LOCATION=os.environ.get("STATICFILES_LOCATION")
    # MEDIAFILES_LOCATION=os.environ.get("MEDIAFILES_LOCATION")
    # PUBLICFILES_LOCATION=os.environ.get("MEDIAFILES_LOCATION")
    # AWS_S3_FILE_OVERWRITE=False
    # AWS_DEFAULT_ACL=os.environ.get("AWS_DEFAULT_ACL")

    # STATICFILES_DIRS = (
    #     os.path.join(BASE_DIR, 'static/'),
    # )
    # STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

    AWS_ACCESS_KEY_ID="AKIA5BNZZ4736SQUK4XF"
    AWS_LOCATION="static"
    AWS_MEDIA_BUCKET_NAME="aws-todo-static"
    AWS_S3_REGION_NAME="ap-northeast-1"
    AWS_STORAGE_BUCKET_NAME="aws-todo-static"
    AWS_S3_ENDPOINT_URL="https://s3.amazonaws.com/aws-todo-static/"
    # AWS_S3_CUSTOM_DOMAIN=https://s3.amazonaws.com/aws-todo-static/
    AWS_SECRET_ACCESS_KEY="kxM9KleICQtsWofeExJvM81lb0c2k86d8Hg3fwp0"
    AWS_DEFAULT_ACL="public-read"
    STATICFILES_LOCATION="aws-todo-static/dev/static"
    MEDIAFILES_LOCATION="aws-todo-static/dev/media"
    PUBLICFILES_LOCATION="aws-todo-static/dev/media"
    AWS_S3_FILE_OVERWRITE=False